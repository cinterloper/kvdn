plugins {
    id 'java'
    id 'application'
    id "org.echocat.golang" version "0.1.14"
}


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}
// Package name of your project.
// Example: github.com/my_user/my_project
group = '' // String - REQUIRED (if golang.packageName is not set)

golang {
    // Comma separated list of platforms to build
    platforms = 'linux-386,linux-amd64,windows-386,windows-amd64,darwin-amd64' // String
    // Overwrite the package name of 'group' - be useful for overriding settings for
    // specific tasks.
    packageName = '<same as group>' // String
    // Platform of the building host. Automatically set by 'validate' task
    hostPlatform = '<automatically detected>' // Platform
    // Location where to place the go toolchain and other assets temporarily
    cacheRoot = '~/.go' // Path

    dependencies {
        // Here you can specify dependencies in Golang familiar way
        // configuration:
        //    * build: Required for build and testing
        //    * test:  Required only for test
        //    * tool:  Tool required only while build process
        // packageName: Name of package to import. Should be the same as used in source code for import.
        // version:     Can identify the branchname, commit revisions, ... of a package.
        //<configuration> '<packageName>[:<version>]'
        // Example: build 'github.com/urfave/cli'
        // ...

        // Dependency required only for testing
        test '<package name>[:<version>]'
        // ...

        // Tool dependency required only while build process
        tool '<package name>[:<version>]'
        // ...

        // If true it will always download every dependency also if there are no updates available.
        forceUpdate = false // Boolean

        // If true it will delete unknown dependencies on clean task.
        deleteUnknownDependencies = true // Boolean

        // If true it will delete all dependencies on clean task.
        deleteAllCachedDependenciesOnClean = false // Boolean

        // Directory where to cache all dependencies in.
        dependencyCache = 'vendor' // Path
    }

    build {
        // GOPATH to use for build.
        // Will be replaced with a temporary one if useTemporaryGopath is set to true.
        gopath = '${GOPATH}' // Path

        // If enabled a temporary GOPATH is created to build in.
        useTemporaryGopath = false // Boolean

        // Is used to identify sources to be processed
        includes = [] // []String

        // Is used to identify sources to be NOT processed
        excludes = ['.git/**', '.svn/**', 'build.gradle', 'build/**', '.gradle/**', 'gradle/**'] // []String

        // Optional arguments to pass to go build tool
        arguments = [] // []String

        // Name of the generated output filename.
        // Placeholders:
        // * %{platform} - Platform name like 'linux-amd64'
        // * %{extension} - Platform specific executable extension like on Windows='.exe' or Linux=''
        // * %{separator} - Separator in paths like on Linux='/' or Windows='\'
        // * %{pathSeparator} - Separator to split paths like on Linux=':' or Windows=';'
        outputFilenamePattern = 'build/out/<project name>-%{platform}%{extension}' // String

        // Definitions to pass to ld
        definitions = [] // [String]String
    }

    testing {
        // If true no tests will be executed.
        skip = false // Boolean

        // Explicit packages to test
        // If provided 'includes' and 'excludes' will be ignored.
        packages = [] // []String

        // Searches in this directories for test go sources to be tested.
        includes = [] // []String

        // Do not searches in this directories for test go sources to be tested.
        excludes = [] // []String

        // Optional arguments to pass to the go test tool
        arguments = [] // []String

        // Optional arguments to pass to the go test itself
        testArguments = [] // []String

        // Write a coverage profile to the file after all tests have passed.
        // Force call "go test" with "-cover" flag.
        coverProfile = null // String

        // Write a coverage profile as HTML to the file after all tests have passed.
        // Force call "go test" with "-cover" flag.
        coverProfileHtml = null // String

        // Will write the test output in the specified file.
        // If set to null this file will not be written.
        log = "${buildDir}/testing/test.log" // String

        // Will write the test output in JUnit report format in the specified file.
        // If set to null this file will not be written.
        junitReport = "${buildDir}/testing/junit_report.xml" // String
    }

    toolchain {
        // Always build toolchain also if already there and working
        forceBuildToolchain = false // Boolean

        // Used go version
        goversion = 'go1.6.2' // String

        // Used GOROOT. This will normally automated detected by validate task
        goroot = '<automatically detected>' // Path

        // Use cgo or not
        cgoEnabled = false // Boolean

        // Used GOROOT_BOOTSTRAP. This will normally automated detected by validate task
        bootstrapGoroot = '<automatically detected>' // Path

        // Location where to download bootstrap toolchain and target toolchain
        downloadUriRoot = 'https://storage.googleapis.com/golang/' // URI
    }
}

dependencies {
    // Here you can define dependencies in Gradle familiar way.
    // In this context it is not possible to provide all possible variables and you have to provide more
    // meta information than under "golang.dependencies".

    // configuration:
    //    * build: Required for build and testing
    //    * test:  Required only for test
    //    * tool:  Tool required only while build process
    // packageName: It is required to split the package up to meet default Gradle behaviours.
    //    Example: "github.com/urfave/cli" -> "github.com:urfave/cli"
    // version: Identifies the version of the dependency package to use. If you want to use the default one
    //    provide the special keyword "default".
    // <configuration> '<providerPartOfPackageName>:<restOfPackageName>:<version>'
    // Example: build 'github.com:urfave/cli:default'
    // ...
}
def projversion = rootProject.getVersion()

version = projversion

sourceCompatibility = '1.8'

dependencies {

}



task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}
